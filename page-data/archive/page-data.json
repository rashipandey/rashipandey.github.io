{
    "componentChunkName": "component---src-pages-archive-js",
    "path": "/archive/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"date":"2024-04-14","title":"Learning Management System","tech":["React","Next 14","Tailwind CSS","MySQL"],"github":"","external":null,"company":"Certification"},"html":"<p>I built this cool online classroom that's like Udemy, but with my own twist. It's got a smart search that helps you find courses super fast, and you can pay safely without any fuss. Teachers can easily upload their lessons, including videos, and students get to track their progress in real-time. The best part? When you finish a course, you get this fun little celebration animation – it's the digital equivalent of a high five! It was a blast putting all these techy pieces together to create something that makes learning a bit more fun and a lot more accessible.</p>"}},{"node":{"frontmatter":{"date":"2024-04-13","title":"Google Analytics 4 (GA4)","tech":["GA4","Digital Marketing","Insight Generation"],"github":"","external":"https://skillshop.credential.net/b378d522-b9ba-4610-8783-22b4a9f34332","company":"Certification"},"html":"<p>Understood how to set up and structure a property, and use various reporting tools and features for better marketing decisions</p>"}},{"node":{"frontmatter":{"date":"2024-02-01","title":"Stock Market Maximum Profit Prediction","tech":["Java","Algorithms"],"github":"https://github.com/rashipandey/STOCK-MARKET-MAXIMUM-PROFIT-PREDICTION","external":null,"company":"Project"},"html":"<p>The Analysis of Algorithms (COT5405) project involved developing various algorithms to maximize stock trading profits based on price predictions over multiple days. It addressed problems like single transactions, multiple transactions with cooldown periods, and limited transactions. Implementations included a brute force method, a greedy algorithm, and dynamic programming solutions. The project overcame challenges related to efficiency, correctness, and handling large datasets. Detailed design, pseudocode, correctness proofs, and experimental comparisons highlight the performance and effectiveness of each algorithm.</p>"}},{"node":{"frontmatter":{"date":"2023-11-20","title":"P2P File Sharing System ","tech":["Java","Computer Networking","Shell Scripting"],"github":"https://github.com/rashipandey/P2P-File-Sharing-System","external":null,"company":"Project"},"html":"<p>The P2P File Sharing System is a project developed for the CNT5106C - Computer Networks course, enabling decentralized file sharing among peers within a network. The system allows peers to share, request, and download file pieces, ensuring efficient data transfer and file reconstruction. Key features include TCP handshake for connection establishment, message handling for various peer interactions, and scheduling algorithms for optimal data exchange. The project is implemented in Java, utilizing multi-threading for concurrency, and is designed for deployment on CISE machines. Contributions from team members ensured robust protocol implementation, efficient file management, and comprehensive logging for monitoring the system.</p>"}},{"node":{"frontmatter":{"date":"2023-08-20","title":"Twitter Clone","tech":["Erlang","Actor Model","Cowboy","React"],"github":"https://github.com/rashipandey/Twitter-Clone/tree/main","external":null,"company":"Case Competition"},"html":"<p>I built a mini-Twitter that's like the real deal, but with my own geeky twist. Imagine Twitter, but running on a super-cool language called Erlang – it's like the secret sauce that makes everything run smoothly behind the scenes.</p>\n<p>On the surface, it looks and feels just like Twitter. You can tweet your heart out, follow your friends (or celebrities, no judgment!), retweet the good stuff, and even dive into hashtag rabbit holes. But here's where it gets fun: I made it so that everything happens lightning-fast. When you tweet, it's like your words are teleporting to your followers' feeds instantly.</p>\n<p>Building this was like creating a digital playground where bits of information zip around at the speed of light. It was a blast to put together, and it really made me appreciate the brains behind the real Twitter.</p>"}},{"node":{"frontmatter":{"date":"2023-08-01","title":"Bitcoin Simulator","tech":["Erlang","SHA 256","Actor Model","Distributed Systems"],"github":"https://github.com/rashipandey/Distributed-Operating-Systems/tree/main/Bitcoin%20Simulator","external":null,"company":"Case Competition"},"html":"<p>The Bitcoin Generator project utilizes the Actor Model in Erlang to mine bitcoins using the SHA-256 hashing algorithm. The project features a master-worker architecture enabling remote configuration with client and server machines. The master node coordinates the mining process by spawning actors to generate and hash strings, aiming to find hashes with a specified number of leading zeros. The system is designed to scale across multiple nodes, with each actor operating independently to enhance efficiency and reduce idle times. The implementation successfully demonstrated mining on four different systems concurrently, with the largest coin found having seven leading zeros.</p>"}},{"node":{"frontmatter":{"date":"2022-06-12","title":"Chord Protocol","tech":["Erlang","Functional Programming"],"github":"https://github.com/rashipandey/Distributed-Operating-Systems/tree/main/Chord%20Protocol","external":null,"company":"Certification"},"html":"<p>The Chord P2P System and Simulation project implements the Chord protocol using Erlang and the actor model to manage distributed hash tables. Each node in the system holds key/value pairs and routing information via a finger table, enabling efficient key lookups and node communication. The simulation generates random keys for each node and forwards lookup requests to the nearest node using the finger table, measuring the average number of hops required. Observations revealed that the number of hops is directly proportional to the number of nodes, with the largest network tested comprising 60,000 nodes and achieving an average hop time of 7.46. The project highlights the scalability and efficiency of the Chord protocol in distributed systems.</p>"}},{"node":{"frontmatter":{"date":"2020-05-20","title":"Gossip Simulator","tech":["Erlang"],"github":"https://github.com/rashipandey/Distributed-Operating-Systems/tree/main/gossip_protocol","external":null,"company":"Project"},"html":"<p>The Gossip Protocol project for the Distributed Operating System Principles (COP-5615) course used an Erlang-based simulator to evaluate convergence in group communication algorithms. It implemented gossip for information propagation and push-sum for aggregate computation across various topologies: line, full network, 2D grid, and imperfect 3D. The largest tested network had 10,000 nodes. The gossip algorithm converged when nodes heard a rumor ten times, and push-sum when the index-to-weight ratio stabilized. Results showed that the line topology had the fastest convergence, while adding random neighbors in the imperfect 3D topology significantly improved convergence speed.</p>"}}]}},"pageContext":{}},
    "staticQueryHashes": ["1994492073","2009693873","2031412112","3825832676"]}